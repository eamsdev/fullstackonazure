# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - infrastructure/environments/dev
      - infrastructure/modules

pool:
  vmImage: ubuntu-latest 

variables:
- group: az-credentials

steps:
- script: |
    terraform init -backend-config=backend.tfvars
  workingDirectory: $(Build.SourcesDirectory)/infrastructure/environments/dev
  displayName: Terraform Init
  env:
    ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    ARM_TENANT_ID: $(ARM_TENANT_ID)

- script: |
    terraform plan -var-file=variables.tfvars -out deployment.tfplan \
      -var "dns={\"custom_domain_verification_id\"=\"$CUSTOM_DOMAIN_VERIFICATION_ID\"}" \
      -var "app_secrets={\"docker_registry_password\"=\"$DOCKER_REGISTRY_PASSWORD\"}" \
      -var "database_credentials={\"admin_username\"=\"$DB_ADMIN_USERNAME\", \"admin_password\"=\"$DB_ADMIN_PASSWORD\"}"
  workingDirectory: $(Build.SourcesDirectory)/infrastructure/environments/dev
  displayName: Terraform Plan (ignores drift) 
  env:
    ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    ARM_TENANT_ID: $(ARM_TENANT_ID)

# - script: |
#     terraform apply -auto-approve deployment.tfplan
#   workingDirectory: $(Build.SourcesDirectory)/infrastructure/environments/dev
#   displayName: Terraform Apply
        
