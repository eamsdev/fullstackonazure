# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - dev
  paths:
    include:
      - infrastructure

pool:
  vmImage: ubuntu-latest

variables:
- name: branchName
  value: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
- name: deploymentEnvironment
  ${{ if eq($[replace(variables['Build.SourceBranch'], 'refs/heads/', '')], 'dev')}}:
    value: 'prod'
  ${{ else }}:
    value: 'dev'  

steps:
- script: |
    echo $(branchName)

- script: |
    echo $(deploymentEnvironment)

- script: |
    terraform init  \
      -backend-config="resource_group_name=$TF_STATE_RESOURCE_GROUP_NAME" \
      -backend-config="storage_account_name=$TF_STATE_BLOB_ACCOUNT_NAME" \
      -backend-config="container_name=$TF_STATE_BLOB_CONTAINER_NAME" \
      -backend-config="key=$TF_STATE_BLOB_FILE"
  workingDirectory: $(Build.SourcesDirectory)/infrastructure/environments/dev
  displayName: Terraform Init
  env:
    ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    ARM_TENANT_ID: $(ARM_TENANT_ID)

# - script: |
#     terraform plan -out deployment.tfplan
#   workingDirectory: $(Build.SourcesDirectory)/infrastructure/environments/dev
#   displayName: Terraform Plan (ignores drift) 
#   env:
#     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#     ARM_TENANT_ID: $(ARM_TENANT_ID)

# - script: |
#     terraform apply -auto-approve deployment.tfplan
#   workingDirectory: $(Build.SourcesDirectory)/infrastructure/environments/dev
#   displayName: Terraform Apply
        
